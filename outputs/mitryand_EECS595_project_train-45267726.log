Some weights of the model checkpoint at bert-base-cased were not used when initializing BertModel: ['cls.predictions.transform.dense.weight', 'cls.seq_relationship.bias', 'cls.predictions.transform.dense.bias', 'cls.seq_relationship.weight', 'cls.predictions.transform.LayerNorm.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.decoder.weight', 'cls.predictions.bias']
- This IS expected if you are initializing BertModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing BertModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
Some weights of GPT2LMHeadModel were not initialized from the model checkpoint at gpt2 and are newly initialized: ['h.8.crossattention.q_attn.weight', 'h.6.crossattention.bias', 'h.9.crossattention.bias', 'h.7.crossattention.c_proj.bias', 'h.11.crossattention.c_attn.weight', 'h.9.crossattention.c_proj.weight', 'h.10.crossattention.c_proj.bias', 'h.7.crossattention.masked_bias', 'h.2.crossattention.bias', 'h.0.crossattention.masked_bias', 'h.3.crossattention.c_attn.weight', 'h.9.crossattention.q_attn.weight', 'h.0.crossattention.c_attn.weight', 'h.3.crossattention.c_proj.bias', 'h.7.ln_cross_attn.weight', 'h.1.crossattention.c_proj.bias', 'h.1.crossattention.c_attn.weight', 'h.3.ln_cross_attn.weight', 'h.2.crossattention.c_attn.weight', 'h.10.crossattention.c_proj.weight', 'h.4.crossattention.masked_bias', 'h.7.crossattention.c_proj.weight', 'h.10.crossattention.bias', 'h.4.crossattention.bias', 'h.2.crossattention.c_proj.weight', 'h.1.crossattention.c_proj.weight', 'h.4.crossattention.c_proj.weight', 'h.11.crossattention.q_attn.weight', 'h.11.crossattention.c_proj.bias', 'h.8.crossattention.bias', 'h.0.ln_cross_attn.weight', 'h.5.crossattention.masked_bias', 'h.1.ln_cross_attn.weight', 'h.3.crossattention.q_attn.weight', 'h.4.ln_cross_attn.weight', 'h.11.crossattention.bias', 'h.10.ln_cross_attn.weight', 'h.11.ln_cross_attn.weight', 'h.8.crossattention.c_attn.weight', 'h.8.crossattention.c_proj.weight', 'h.6.crossattention.masked_bias', 'h.3.crossattention.masked_bias', 'h.2.crossattention.c_proj.bias', 'h.4.crossattention.q_attn.weight', 'h.8.ln_cross_attn.weight', 'h.5.crossattention.bias', 'h.6.crossattention.c_attn.weight', 'h.5.crossattention.q_attn.weight', 'h.0.crossattention.c_proj.bias', 'h.6.crossattention.q_attn.weight', 'h.11.crossattention.masked_bias', 'h.6.crossattention.c_proj.bias', 'h.1.crossattention.bias', 'h.0.crossattention.q_attn.weight', 'h.1.crossattention.q_attn.weight', 'h.7.crossattention.c_attn.weight', 'h.10.crossattention.masked_bias', 'h.5.crossattention.c_proj.bias', 'h.7.crossattention.q_attn.weight', 'h.11.crossattention.c_proj.weight', 'h.3.crossattention.bias', 'h.4.crossattention.c_attn.weight', 'h.8.crossattention.masked_bias', 'h.2.crossattention.q_attn.weight', 'h.5.crossattention.c_attn.weight', 'h.5.crossattention.c_proj.weight', 'h.9.ln_cross_attn.weight', 'h.5.ln_cross_attn.weight', 'h.6.crossattention.c_proj.weight', 'h.1.crossattention.masked_bias', 'h.7.crossattention.bias', 'h.0.crossattention.c_proj.weight', 'h.10.crossattention.c_attn.weight', 'h.4.crossattention.c_proj.bias', 'h.9.crossattention.c_attn.weight', 'h.2.crossattention.masked_bias', 'h.6.ln_cross_attn.weight', 'h.8.crossattention.c_proj.bias', 'h.9.crossattention.c_proj.bias', 'h.9.crossattention.masked_bias', 'h.3.crossattention.c_proj.weight', 'h.0.crossattention.bias', 'h.10.crossattention.q_attn.weight', 'h.2.ln_cross_attn.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
/home/mitryand/.local/lib/python3.10/site-packages/transformers/models/encoder_decoder/modeling_encoder_decoder.py:634: FutureWarning: Version v4.12.0 introduces a better way to train encoder-decoder models by computing the loss inside the encoder-decoder framework rather than in the decoder itself. You may observe training discrepancies if fine-tuning a model trained with versions anterior to 4.12.0. The decoder_input_ids are now created based on the labels, no need to pass them yourself anymore.
  warnings.warn(DEPRECATION_WARNING, FutureWarning)
/home/mitryand/.local/lib/python3.10/site-packages/transformers/generation_utils.py:1359: UserWarning: Neither `max_length` nor `max_new_tokens` has been set, `max_length` will default to 20 (`self.config.max_length`). Controlling `max_length` via the config is deprecated and `max_length` will be removed from the config in v5 of Transformers -- we recommend using `max_new_tokens` to control the maximum length of the generation.
  warnings.warn(
