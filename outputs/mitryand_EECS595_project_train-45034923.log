Some weights of the model checkpoint at bert-base-uncased were not used when initializing BertModel: ['cls.seq_relationship.bias', 'cls.seq_relationship.weight', 'cls.predictions.bias', 'cls.predictions.transform.dense.bias', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.decoder.weight', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.LayerNorm.bias']
- This IS expected if you are initializing BertModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing BertModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
Some weights of GPT2LMHeadModel were not initialized from the model checkpoint at gpt2 and are newly initialized: ['h.2.ln_cross_attn.weight', 'h.2.crossattention.c_attn.weight', 'h.9.crossattention.c_proj.weight', 'h.5.crossattention.c_proj.weight', 'h.8.crossattention.q_attn.weight', 'h.6.crossattention.c_proj.bias', 'h.5.ln_cross_attn.weight', 'h.2.crossattention.masked_bias', 'h.10.crossattention.bias', 'h.1.ln_cross_attn.weight', 'h.5.crossattention.c_attn.weight', 'h.2.crossattention.c_proj.bias', 'h.7.crossattention.c_attn.weight', 'h.0.crossattention.c_proj.bias', 'h.2.crossattention.c_proj.weight', 'h.1.crossattention.masked_bias', 'h.11.crossattention.c_proj.weight', 'h.7.crossattention.masked_bias', 'h.0.crossattention.masked_bias', 'h.10.crossattention.c_proj.bias', 'h.7.crossattention.q_attn.weight', 'h.9.crossattention.q_attn.weight', 'h.7.crossattention.bias', 'h.1.crossattention.q_attn.weight', 'h.0.crossattention.c_attn.weight', 'h.0.crossattention.q_attn.weight', 'h.9.crossattention.masked_bias', 'h.6.crossattention.bias', 'h.3.ln_cross_attn.weight', 'h.4.crossattention.bias', 'h.6.crossattention.masked_bias', 'h.4.crossattention.c_proj.weight', 'h.7.crossattention.c_proj.weight', 'h.6.crossattention.c_attn.weight', 'h.8.crossattention.bias', 'h.1.crossattention.c_attn.weight', 'h.4.crossattention.c_attn.weight', 'h.3.crossattention.bias', 'h.4.crossattention.masked_bias', 'h.11.crossattention.c_proj.bias', 'h.11.crossattention.q_attn.weight', 'h.10.crossattention.c_attn.weight', 'h.8.ln_cross_attn.weight', 'h.9.crossattention.c_proj.bias', 'h.5.crossattention.masked_bias', 'h.2.crossattention.q_attn.weight', 'h.0.ln_cross_attn.weight', 'h.5.crossattention.bias', 'h.3.crossattention.c_attn.weight', 'h.11.crossattention.masked_bias', 'h.3.crossattention.c_proj.bias', 'h.9.ln_cross_attn.weight', 'h.4.crossattention.q_attn.weight', 'h.7.ln_cross_attn.weight', 'h.2.crossattention.bias', 'h.3.crossattention.masked_bias', 'h.8.crossattention.c_proj.weight', 'h.5.crossattention.c_proj.bias', 'h.5.crossattention.q_attn.weight', 'h.4.crossattention.c_proj.bias', 'h.11.crossattention.bias', 'h.8.crossattention.c_attn.weight', 'h.0.crossattention.c_proj.weight', 'h.1.crossattention.c_proj.bias', 'h.10.crossattention.q_attn.weight', 'h.0.crossattention.bias', 'h.10.crossattention.masked_bias', 'h.11.crossattention.c_attn.weight', 'h.3.crossattention.q_attn.weight', 'h.4.ln_cross_attn.weight', 'h.6.crossattention.q_attn.weight', 'h.11.ln_cross_attn.weight', 'h.1.crossattention.bias', 'h.8.crossattention.masked_bias', 'h.9.crossattention.c_attn.weight', 'h.8.crossattention.c_proj.bias', 'h.6.ln_cross_attn.weight', 'h.6.crossattention.c_proj.weight', 'h.3.crossattention.c_proj.weight', 'h.10.crossattention.c_proj.weight', 'h.1.crossattention.c_proj.weight', 'h.10.ln_cross_attn.weight', 'h.9.crossattention.bias', 'h.7.crossattention.c_proj.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
loaded 116 training samples
loaded 27 validation samples
loaded 3 test samples
created model
Begin training!
  0%|          | 0/1856 [00:00<?, ?it/s]/home/mitryand/.local/lib/python3.10/site-packages/transformers/models/encoder_decoder/modeling_encoder_decoder.py:634: FutureWarning: Version v4.12.0 introduces a better way to train encoder-decoder models by computing the loss inside the encoder-decoder framework rather than in the decoder itself. You may observe training discrepancies if fine-tuning a model trained with versions anterior to 4.12.0. The decoder_input_ids are now created based on the labels, no need to pass them yourself anymore.
  warnings.warn(DEPRECATION_WARNING, FutureWarning)
  0%|          | 1/1856 [00:02<1:03:36,  2.06s/it]Traceback (most recent call last):
  File "/home/mitryand/EECS-595-Final-Project-Style-Transfer/train_model.py", line 188, in <module>
    main(params)
  File "/home/mitryand/EECS-595-Final-Project-Style-Transfer/train_model.py", line 169, in main
    model = train(model, train_dataloader, eval_dataloader, params, input_tokenizer, output_tokenizer)
  File "/home/mitryand/EECS-595-Final-Project-Style-Transfer/train_model.py", line 95, in train
    outputs = model(input_ids=batch[0], labels=batch[1])
  File "/home/mitryand/.local/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/mitryand/.local/lib/python3.10/site-packages/transformers/models/encoder_decoder/modeling_encoder_decoder.py", line 637, in forward
    loss = loss_fct(logits.reshape(-1, self.decoder.config.vocab_size), labels.view(-1))
  File "/home/mitryand/.local/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/mitryand/.local/lib/python3.10/site-packages/torch/nn/modules/loss.py", line 1164, in forward
    return F.cross_entropy(input, target, weight=self.weight,
  File "/home/mitryand/.local/lib/python3.10/site-packages/torch/nn/functional.py", line 3014, in cross_entropy
    return torch._C._nn.cross_entropy_loss(input, target, weight, _Reduction.get_enum(reduction), ignore_index, label_smoothing)
RuntimeError: CUDA out of memory. Tried to allocate 2.22 GiB (GPU 0; 44.37 GiB total capacity; 39.48 GiB already allocated; 574.50 MiB free; 42.71 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
  0%|          | 1/1856 [00:03<1:58:31,  3.83s/it]
